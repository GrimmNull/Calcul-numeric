pub mod exercise {
    fn polynomial(x: f64, a0: f64, a1: f64, a2: f64, a3: f64, a4: f64) -> f64 {
        return a0 + x * (a1 + x * (a2 + x * (a3 * x * a4)));
    }

    fn p_sin(x: f64) -> f64 {
        polynomial(x,
                   1805490264.690988571178600370234394843221,
                   -164384678.227499837726129612587952660511,
                   3664210.647581261810227924465160827365,
                   -28904.140246461781357223741935980097,
                   76.568981088717405810132543523682,
        )
    }

    fn q_sin(x: f64) -> f64 {
        let result = polynomial(x,
                                2298821602.638922662086487520330827251172,
                                27037050.118894436776624866648235591988,
                                155791.388546947693206469423979505671,
                                540.567501261284024767779280700089,
                                1.0,
        );
        let low_limit = f64::powf(10.0, -12.0);

        return if result > low_limit { result } else { low_limit };
    }

    pub fn computed_sin(x: f64) -> f64 {
        x * p_sin(f64::powf(x, 2.0)) / q_sin(f64::powf(x, 2.0))
    }

    fn p_cos(x: f64) -> f64 {
        polynomial(x,
                   1090157078.174871420428849017262549038606,
                   -321324810.993150712401352959397648541681,
                   12787876.849523878944051885325593878177,
                   -150026.206045948110568310887166405972,
                   538.333564203182661664319151379451,
        )
    }

    fn q_cos(x: f64) -> f64 {
        let result = polynomial(x,
                                1090157078.174871420428867295670039506886,
                                14907035.776643879767410969509628406502,
                                101855.811943661368302608146695082218,
                                429.772865107391823245671264489311,
                                1.0,
        );
        let low_limit = f64::powf(10.0, -12.0);

        return if result > low_limit { result } else { low_limit };
    }

    pub fn computed_cos(x: f64) -> f64 {
        p_cos(f64::powf(x, 2.0)) / q_cos(f64::powf(x, 2.0))
    }

    fn p_ln(x: f64) -> f64 {
        polynomial(x,
                   75.151856149910794642732375452928,
                   -134.730399688659339844586721162914,
                   74.201101420634257326499008275515,
                   -12.777143401490740103758406454323,
                   0.332579601824389206151063529971,
        )
    }

    fn q_ln(x: f64) -> f64 {
        let result = polynomial(x,
                                37.575928074955397321366156007781,
                                -79.890509202648135695909995521310,
                                56.215534829542094277143417404711,
                                -14.516971195056682948719125661717,
                                1.0,
        );
        let low_limit = f64::powf(10.0, -12.0);

        return if result > low_limit { result } else { low_limit };
    }

    pub fn computed_ln(x: f64) -> f64 {
        let z: f64 = (x - 1.0) / (x + 1.0);

        return z * p_ln(f64::powf(z, 2.0)) / q_ln(f64::powf(z, 2.0));
    }
}